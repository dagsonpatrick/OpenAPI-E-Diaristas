_id: spc_272dfba373d74d049c86e73ab69a47ca
type: ApiSpec
parentId: wrk_e38b709750814de5a8b73515800efa08
modified: 1677447580157
created: 1676216621763
fileName: ediaristas.yaml
contents: >-
  openapi: 3.0.1


  info:

    title: E-Diaristas
    description: API back-end aplicação E-Diaristas desenvolvida durante a imersão Multi-Stack da TreinaWeb
    version: 1.0.0
    contact:
      name: TreinaWeb
      url: https://www.treinaweb.com.br/contato
      email: contato@treinaweb.com.br

  servers:

    - url: http://localhost:8000
      description: Aplicação Python Django
    - url: http://127.0.0.1:8080
      description: Aplicação Java Spring Boot

  tags:

    - name: Me
    - name: Api
    - name: Auth
    - name: Diárias
    - name: Usuários
    - name: Diaristas
    - name: Enderecos
    - name: Oportunidades

    

  paths:

    /api:
      get:
        operationId: getLinks
        tags:
          - Api
        description: Exibe os links iniciais da API
       
        responses:
          '200':
            description: Exibição foi realizada com sucesso
            content:
              'application/json':
                schema:
                  type: object
                  properties:
                    links:
                      type: array
                      items: 
                        $ref: '#/components/schemas/LinkResponse'
    /api/diaristas/localidades:
      get:
        operationId: getDiaristasLocalidades
        tags:
          - Diaristas
        description: Buscar diáristas que atendem uma determinada localidade
        parameters:
          - name: cep
            in: query
            required: true
            schema:
              type: string
            example: '04614903'
        responses:
          '200':
            description: Busca foi realizada com sucesso
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/DiaristaLocalidadePagedResponse'
          '400':
            description: CEP não foi informado ou é invalido
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '404':
            description: CEP informado não foi encontrado
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
    /api/diaristas/disponibilidade:
      get:
        operationId: getDisponibilidade
        tags:
          - Diaristas
        description: Verificar a disponibilidade de diáristas por localidade
        parameters:
          - name: cep
            in: query
            required: true
            schema:
              type: string
            example: '04614903'
        responses:
          '200':
            description: Verificação foi realizada com sucesso
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/DisponibilidadeResponse'
          '400':
            description: CEP não foi informado ou é invalido
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '404':
            description: CEP informado não foi encontrado
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'              
    /api/enderecos:
      get:
        operationId: getEndereco
        tags:
          - Enderecos
        description: Buscar dados de um endereço por cep
        parameters:
          - name: cep
            in: query
            required: true
            schema:
              type: string
            example: '04614903'
        responses:
          '200':
            description: Busca foi realizada com sucesso
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/EnderecoResponse'
          '400':
            description: CEP não foi informado ou é invalido
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '404':
            description: CEP informado não foi encontrado
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'           
    /api/usuarios:
      post:
        operationId: postUsuario
        tags:
          - Usuários
        description: Cadastrar um novo usuário
        requestBody:
          content:
            'multipart/form-data':
              schema:
                $ref: '#/components/schemas/CreateUsuarioRequest'
        responses:
          '201':
            description: usuário cadastrado com sucesso
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/CreatedUsuarioResponse'
          '400':
            description: Houveram erros de validação
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
    /api/usuarios/endereco:
      get:
        operationId: getUsuarioEndereco
        tags:
          - Usuários
        description: Exibe o endereço do usuário logado
        responses:
          '200':
            description: Endereço do usuário logado exibido com sucesso
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/UsuarioEnderecoResponse'
          '401':
            description: Usuário não está autenticado
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '403':
            description: Usuário autenticado não tem acesso para realizar está operação
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '404':
            description: O endereço do usuário logado não foi encontrado
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
      put:
        operationId: putUsuarioEndereco
        tags:
          - Usuários
        description: Alterar o endereço do usuário logado
        requestBody:
          content:
            'multipart/form-data':
              schema:
                $ref: '#/components/schemas/UsuarioEnderecoRequest'
        responses:
          '200':
            description: Alteradação do endereço realizada com sucesso
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/UsuarioEnderecoResponse'
          '401':
            description: Usuário não está autenticado
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '400':
            description: Houveram erros de validação
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '403':
            description: Usuário autenticado não tem acesso para realizar está operação
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          
        security:
          - JWT: []
    /api/usuarios/cidades-atendidas:
      get:
        operationId: getUsuarioCidadesAtendidas
        tags:
          - Usuários
        description: Lista as cidades atendidas pelo usuário logado
        responses:
          '200':
            description: Listagem realizada com sucesso
            content:
              'application/json':
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/UsuarioCidadeAtendidaResponse'
          '401':
            description: Usuário não está autenticado
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '403':
            description: Usuário autenticado não tem acesso para realizar está operação
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          
      put:
        operationId: putUsuarioCidadesAtendidas
        tags:
          - Usuários
        description: Atualizar as cidades atendidas pelo usuário logado
        requestBody:
          content:
            'multipart/form-data':
              schema:
                $ref: '#/components/schemas/UsuarioCidadesAtendidasRequest'
        responses:
          '200':
            description: Cidades atendidas pelo usuário logado atualizadas com sucesso
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/MessageResponse'
          '400':
            description: Houveram erros de validação
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '403':
            description: Usuário autenticado não tem acesso para realizar está operação
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '401':
            description: Usuário não está autenticado
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        security:
          - JWT: []
    /auth/token:
      post:
        operationId: token
        tags:
          - Auth
        description: Autenticar com as credenciais do usuário
        requestBody:
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/CredentialsRequest'
        responses:
          '200':
            description: Autenticação realizada com sucesso
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/TokenResponse'
          '400':
            description: Houveram erros de validação
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '401':
            description: Credenciais incorretas
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
    /auth/refresh:
      post:
        operationId: refresh
        tags:
          - Auth
        description: Autenticar com o refresh token
        requestBody:
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RefreshRequest'
        responses:
          '200':
            description: Autenticação realizada com sucesso
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/TokenResponse'
          '400':
            description: Houveram erros de validação
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '401':
            description: Refresh Token inválido
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
    /auth/logout:
      post:
        operationId: logout
        tags:
          - Auth
        description: Realizar logout ao inválidar o refresh token
        requestBody:
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/RefreshRequest'
        responses:
          '205':
            description: Logout realizado com sucesso
          '400':
            description: Houveram erros de validação
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '401':
            description: Refresh Token inválido
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
    /api/me:
      get:
        operationId: getMe
        tags:
          - Me
        description: Obter os dados do usuário logado
        responses:
          '200':
            description: Usuário logado obtido com sucesso
          '400':
            description: Houveram erros de validação
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/MeResponse'
          '401':
            description: Refresh Token inválido
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        security:
          - JWT: []
    /api/diarias:
      
      get:
        operationId: getDiarias
        tags:
          - Diárias
        description: Listas as diárias do usuário logado
        responses:
          '200':
            description: Listagem realizada com sucesso
            content:
              'application/json':
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/DiariaResponse'
          '401':
            description: Usuário não está autenticado
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '403':
            description: Usuário autenticado não tem acesso para realizar está operação
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        security:
          - JWT: []
      
      post:
        operationId: postDiaria
        tags:
          - Diárias
        description: Cadastrar nova Diária
        requestBody:
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DiariaRequest'
        responses:
          '201':
            description: Diária cadastrada com sucesso
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/DiariaResponse'
          '400':
            description: Houveram erros de validação
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '401':
            description: Usuário não está autenticado
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '403':
            description: Usuário autenticado não tem acesso para realizar está operação
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        security:
          - JWT: []
    /api/diarias/{diariaId}:
      get:
        operationId: getDiaria
        tags:
          - Diárias
        description: Busca um diária pelo id
        parameters:
          - name: diariaId
            in: path
            description: ID da diária a ser buscada
            required: true
            schema:
              type: integer
            example: 1
        responses:
          '200':
            description: Diária encontrada com sucesso
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/DiariaResponse'
          '401':
            description: Usuário não está autenticado
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '403':
            description: Usuário autenticado não tem acesso para realizar está operação
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '404':
            description: Diária não encontrada
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        security:
          - JWT: []   
    /api/diarias/{diariaId}/pagar:
      post:
        operationId: pagarDiaria
        tags:
          - Diárias
        description: Realizar o pagamento de uma diária
        parameters:
          - name: diariaId
            in: path
            description: ID da diária a ser paga
            required: true
            schema:
              type: integer
            example: 1
        requestBody:
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PagamentoRequest'
        responses:
          '200':
            description: Pagamento realizado com sucesso
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/MessageResponse'
          '400':
            description: Houveram erros de validação
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '401':
            description: Usuário não está autenticado
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '403':
            description: Usuário autenticado não tem acesso para realizar está operação
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '404':
            description: Diária não encontrada
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          
        security:
          - JWT: []
    /api/diarias/{diariaId}/candidatar:
      post:
        operationId: candidatarDiaria
        tags:
          - Diárias
        description: Realizar candidatura do usuário logado para uma diária
        parameters:
          - name: diariaId
            in: path
            description: ID da diária para se candidatar
            required: true
            schema:
              type: integer
            example: 1
        responses:
          '200':
            description: Candidatura realizado com sucesso
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/MessageResponse'
          '401':
            description: Usuário não está autenticado
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '403':
            description: Usuário autenticado não tem acesso para realizar está operação
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '404':
            description: Diária não encontrada
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        security:
          - JWT: []
    /api/oportunidades:
      get:
        operationId: getOportunidades
        tags:
          - Oportunidades
        description: Lista as oportunidades disponiveis para o usuário logado
       
        responses:
          '200':
            description: Oportunidades listadas com sucesso
            content:
              'application/json':
                schema:
                  type: array
                  items: 
                    $ref: '#/components/schemas/OportunidadeResponse'   
          '401':
            description: Usuário não está autenticado
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          '403':
            description: Usuário autenticado não tem acesso para realizar está operação
            content:
              'application/json':
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
        security:
          - JWT: []

          
  components:
    
    schemas:
    
      DiaristaLocalidadePagedResponse:
        type: object
        properties:
          diaristas:
            type: array
            items:
              $ref: '#/components/schemas/DiaristaLocalidadeResponse'
          quantidade_diaristas:
            type: integer
      DiaristaLocalidadeResponse:
        type: object
        properties:
          nome_completo:
            type: string
          reputacao:
            type: number
            format: double
          foto_usuario:
            type: string
            format: uri
          cidade:
            type: string
      ErrorResponse:
        type: object
        properties:
          status:
            type: integer
          timestamp:
            type: string
            format: date-time
          message:
            type: string
          erros:
            type: object
            additionalProperties:
              type: array
              items:
                type: string            
      EnderecoResponse:
        type: object
        properties:
          cep:
            type: string
          logradouro:
            type: string
          complemento:
            type: string
          bairro:
            type: string
          localidade:
            type: string
          uf:
            type: string
          ibge:
            type: string
      DisponibilidadeResponse:
        type: object
        properties:
          disponibilidade:
            type: boolean
      LinkResponse:
        type: object
        properties:
          type:
            type: string
            enum:
              - GET
              - POST
              - PUT
              - PATCH
              - DELETE
          rel:
            type: string
          uri:
            type: string
            format: uri
      CreateUsuarioRequest:
        type: object
        required:
          - nome_completo
          - email
          - password
          - password_confirmation
          - tipo_usuario
          - cpf
          - nascimento
          - telefone
          - foto_documento
        properties:
          nome_completo:
            type: string
            minLength: 3
            maxLength: 255
          email:
            type: string
            format: email
            maxLength: 255
          password:
            type: string
            format: password
          password_confirmation:
            type: string
            format: password
          tipo_usuario:
            type: integer
            enum:
              - 1
              - 2
          cpf:
            type: string
            minLength: 11
            maxLength: 11
          nascimento:
            type: string
            format: date
          telefone:
            type: string
            minLength: 11
            maxLength: 11
          foto_documento:
            type: string
            format: binary
          chave_pix:
            type: string
            minLength: 11
            maxLength: 255          
      CreatedUsuarioResponse:
        type: object
        properties:
          id:
            type: integer
          nome_completo:
            type: string
          email:
            type: string
            format: email
          tipo_usuario:
            type: integer
            enum:
              - 1
              - 2
          cpf:
            type: string
          nascimento:
            type: string
            format: date
          telefone:
            type: string
          foto_usuario:
            type: string
            format: uri
          chave_pix:
            type: string
          token:
            $ref: '#/components/schemas/TokenResponse'
          links:
            type: array
            items:
              $ref: '#/components/schemas/LinkResponse'
      UsuarioEnderecoRequest:
        type: object
        required:
          - logradouro
          - numero
          - bairro
          - cep
          - cidade
          - estado
        properties:
          logradouro:
            type: string
            minLength: 3
            maxLength: 255
          numero:
            type: string
            minLength: 3
            maxLength: 255
          bairro:
            type: string
            minLength: 3
            maxLength: 255
          cep:
            type: string
            minLength: 8
            maxLength: 8
          cidade:
            type: string
            minLength: 3
            maxLength: 255
          estado:
            type: string
            minLength: 2
            maxLength: 2
      UsuarioEnderecoResponse:
        type: object
        properties:
          id:
            type: integer
          logradouro:
            type: string
          numero:
            type: string
          bairro:
            type: string
          cep:
            type: string
          cidade:
            type: string
          estado:
            type: string
      UsuarioCidadesAtendidasRequest:
        type: object
        required:
          - cidades
        properties:
          cidades:
            type: array
          items:
            $ref: '#/components/schemas/UsuarioCidadesAtendidasRequest'
      UsuarioCidadeAtendidaResponse:
       type: object
       properties:
          id:
            type: integer
          cidade:
            type: string
          estado:
            type: string
          codigo_ibge:
            type: string
      OportunidadeResponse:
        type: object
        properties:
          id:
            type: integer
          status:
            type: integer
            enum:
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
              - 7
          motivo_cancelamento:
            type: string
          nome_servico:
            type: string          
          created_at:
            type: string
            format: date-time
          updated_at:
            type: string
            format: date-time
          data_atendimento:
            type: string
            format: date-time
          tempo_atendimento:
            type: integer
          preco:
            type: number
            format: double
          cep:
            type: string
          logradouro:
            type: string
          complemento:
            type: string
          bairro:
            type: string
          cidade:
            type: string
          estado:
            type: string
          codigo_ibge:
            type: string
          quantidade_quartos:
            type: integer
          quantidade_salas:
            type: integer
          quantidade_banheiros:
            type: integer
          quantidade_cozinhas:
            type: integer
          quantidade_quintais:
            type: integer
          quantidade_outros:
            type: integer
          observacoes:
            type: string
          servico:
            type: integer  
          cliente:
            $ref: '#/components/schemas/UsuarioDiariaRequest'
          avaliacores_cliente:
            type: array
            items:
              $ref: '#/components/schemas/AvaliacaoResponse'
          links:
            type: array
            items:
              $ref: '#/components/schemas/LinkResponse'     
      AvaliacaoResponse:
        type: object
        properties:
          descricao:
            type: string
          nota:
            type: number
            format: double
          nome_avaliador:
            type: string
          foto_avaliador:
            type: string
            format: uri
      TokenResponse:
        type: object
        properties:
          access:
            type: string
          refresh:
            type: string
      CredentialsRequest:
        type: object
        required:
          - email
          - password
        properties:
          email:
            type: string
            format: email
          password:
            type: string
            format: password
      RefreshRequest:
        type: object
        required:
          - refresh
        properties:
          refresh:
            type: string
      MeResponse:
        type: object
        properties:
          id:
            type: integer
          nome_completo:
            type: string
          email:
            type: string
            format: email
          tipo_usuario:
            type: integer
            enum:
              - 1
              - 2
          cpf:
            type: string
          nascimento:
            type: string
            format: date
          telefone:
            type: string
          foto_usuario:
            type: string
            format: uri
          chave_pix:
            type: string
          links:
            type: array
            items:
              $ref: '#/components/schemas/LinkResponse'
      DiariaRequest:
        type: object
        required:
          - data_atendimento
          - tempo_atendimento
          - preco
          - cep
          - logradouro
          - bairro
          - cidade
          - estado
          - codigo_ibge
          - quantidade_quartos
          - quantidade_salas
          - quantidade_banheiros
          - quantidade_cozinhas
          - quantidade_quintais
          - quantidade_outros
          - servico
        properties:
          data_atendimento:
            type: string
            format: date-time
          tempo_atendimento:
            type: integer
          preco:
            type: number
            format: double
          cep:
            type: string
          logradouro:
            type: string
          complemento:
            type: string
          bairro:
            type: string
          cidade:
            type: string
          estado:
            type: string
          codigo_ibge:
            type: string
          quantidade_quartos:
            type: integer
          quantidade_salas:
            type: integer
          quantidade_banheiros:
            type: integer
          quantidade_cozinhas:
            type: integer
          quantidade_quintais:
            type: integer
          quantidade_outros:
            type: integer
          observacoes:
            type: string
          servico:
            type: integer
      DiariaResponse:
        type: object
        properties:
          id:
            type: integer
          status:
            type: integer
            enum:
              - 1
              - 2
              - 3
              - 4
              - 5
              - 6
              - 7
          motivo_cancelamento:
            type: string
          nome_servico:
            type: string          
          created_at:
            type: string
            format: date-time
          updated_at:
            type: string
            format: date-time
          data_atendimento:
            type: string
            format: date-time
          tempo_atendimento:
            type: integer
          preco:
            type: number
            format: double
          cep:
            type: string
          logradouro:
            type: string
          complemento:
            type: string
          bairro:
            type: string
          cidade:
            type: string
          estado:
            type: string
          codigo_ibge:
            type: string
          quantidade_quartos:
            type: integer
          quantidade_salas:
            type: integer
          quantidade_banheiros:
            type: integer
          quantidade_cozinhas:
            type: integer
          quantidade_quintais:
            type: integer
          quantidade_outros:
            type: integer
          observacoes:
            type: string
          servico:
            type: integer  
          cliente:
            $ref: '#/components/schemas/UsuarioDiariaRequest'
          diarista:
            $ref: '#/components/schemas/UsuarioDiariaRequest'
          links:
            type: array
            items:
              $ref: '#/components/schemas/LinkResponse'
      UsuarioDiariaRequest:
        type: object
        properties:
          id:
            type: integer
          nome_completo:
            type: string
          nascimento:
            type: string
            format: date
          foto_usuario:
            type: string
            format: uri
          telefone:
            type: string
          tipo_usuario:
            type: integer
            enum:
              - 1
              - 2
          reputacao:
            type: number
            format: double
      PagamentoRequest:
        type: object
        required:
          - card_hash
        properties:
          card_hash:
            type: string
      MessageResponse:
        type: object
        properties:
          mensagem:
            type: string
       
    securitySchemes:
      JWT:
        type: http
        scheme: bearer
contentType: yaml
